import {pipe} from 'fp-ts/lib/function';
import * as RA from 'fp-ts/ReadonlyArray';
import * as RR from 'fp-ts/ReadonlyRecord';

import {record} from 'fp-ts';

// Take the last element in the array for each key generated by fn.
// This probably already exists as a function in fp-ts.
export const lastBy = <K extends string, E>(fn: (a: E) => K) =>
  RA.reduce<E, Record<K, E>>({} as Record<K, E>, (a, e) => {
    a[fn(e)] = e;
    return a;
  });

export const accumBy =
  <K extends string, E>(fn: (a: E) => K) =>
  (arr: ReadonlyArray<E>) =>
    pipe(
      arr,
      RA.reduce<E, Record<K, E[]>>({} as Record<K, E[]>, (a, e) => {
        // break immutability in favour of performance & simplicity.
        const key = fn(e);
        if (a[key]) {
          a[key].push(e);
        } else {
          a[key] = [e];
        }
        return a;
      }),
      record.map(RA.fromArray),
      RR.fromRecord
    );
